<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>6.4</version>
    <media_types>
        <media_type>
            <name>Elasticsearch</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>elastic_apikey</name>
                </parameter>
                <parameter>
                    <name>elastic_index</name>
                    <value>zabbix_events</value>
                </parameter>
                <parameter>
                    <name>elastic_url</name>
                    <value>http://elasticsearch:9200/</value>
                </parameter>
                <parameter>
                    <name>event_ack_status</name>
                    <value>{EVENT.ACK.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_age</name>
                    <value>{EVENT.AGE}</value>
                </parameter>
                <parameter>
                    <name>event_date</name>
                    <value>{EVENT.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_duration</name>
                    <value>{EVENT.DURATION}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_name</name>
                    <value>{EVENT.NAME}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_opdata</name>
                    <value>{EVENT.OPDATA}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_date</name>
                    <value>{EVENT.RECOVERY.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_id</name>
                    <value>{EVENT.RECOVERY.ID}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_name</name>
                    <value>{EVENT.RECOVERY.NAME}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_status</name>
                    <value>{EVENT.RECOVERY.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_time</name>
                    <value>{EVENT.RECOVERY.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_value</name>
                    <value>{EVENT.RECOVERY.VALUE}</value>
                </parameter>
                <parameter>
                    <name>event_severity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_status</name>
                    <value>{EVENT.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_tags</name>
                    <value>{EVENT.TAGSJSON}</value>
                </parameter>
                <parameter>
                    <name>event_time</name>
                    <value>{EVENT.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_udpate_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_update_action</name>
                    <value>{EVENT.UPDATE.ACTION}</value>
                </parameter>
                <parameter>
                    <name>event_update_date</name>
                    <value>{EVENT.UPDATE.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_update_message</name>
                    <value>{EVENT.UPDATE.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>event_update_nseverity</name>
                    <value>{EVENT.UPDATE.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_update_severity</name>
                    <value>{EVENT.UPDATE.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_update_time</name>
                    <value>{EVENT.UPDATE.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_update_user</name>
                    <value>{USER.FULLNAME}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>host_group</name>
                    <value>{TRIGGER.HOSTGROUP.NAME}</value>
                </parameter>
                <parameter>
                    <name>host_ip</name>
                    <value>{HOST.IP}</value>
                </parameter>
                <parameter>
                    <name>host_name</name>
                    <value>{HOST.NAME}</value>
                </parameter>
                <parameter>
                    <name>trigger_description</name>
                    <value>{TRIGGER.DESCRIPTION}</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>zabbix_url</name>
                    <value>https://your.zabbix.url</value>
                </parameter>
            </parameters>
            <script>var body = {
};

//Function to filter non-empty keys, keys starting with elastic_ and filter values start/ending with {}
function printObject(obj, indent) {
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      if (!key.startsWith(&quot;elastic_&quot;) &amp;&amp; key !== &quot;event_tags&quot; &amp;&amp; obj[key] !== &quot;&quot; &amp;&amp; !/^{.*}$/.test(obj[key])) {
        body[indent + key] = obj[key];
        console.log(&quot;Opt2: &quot; + indent + key + &quot;: &quot; + obj[key]);
      }
    }
  }
}

//Function to convert numeric eventsource to text
function EventSourceText(eventsource) {
  switch(eventsource) {
    case 0:
      eventSourceText = &quot;Trigger&quot;;
      break;
    case 1:
      eventSourceText = &quot;Discovery&quot;;
      break;
    case 2:
      eventSourceText = &quot;Autoregistration&quot;;
      break;
    default:
      eventSourceText = &quot;Internal&quot;;
  }
  return eventSourceText;
}

//Function to convert event duration to seconds
//Makes duration searches possible in Elastic
function convertDurationToSeconds(duration) {
const regex = /(\d+)([smhdwMy])/g;
totalSeconds = 0;
while ((match = regex.exec(duration)) !== null) {
  const value = parseInt(match[1]);
  const unit = match[2];
  switch (unit) {
    case 's':
      totalSeconds += value;
      break;
    case 'm':
      totalSeconds += value * 60;
      break;
    case 'h':
      totalSeconds += value * 3600;
      break;
    case 'd':
      totalSeconds += value * 86400;
      break;
    case 'w':
      totalSeconds += value * 604800;
      break;
    case 'M':
      totalSeconds += value * 2592000;
      break;
    case 'y':
      totalSeconds += value * 31536000;
      break;
    default:
      // Ignore unknown units
      break;
    }
  }
  return totalSeconds;
}

try {
  //parse json values
  var params = JSON.parse(value);
  printObject(params, &quot;&quot;);

  //Iterate over all tags and add them to Elastic
  //hese tags will be parsed to Elastic, make sure to add all tag names to the
  //index template in Elasticsearch to make them searchable
  if (params.event_tags !== '{EVENT.TAGSJSON}') {
    var eventTags = JSON.parse(params.event_tags);
    for (var i = 0; i &lt; eventTags.length; i++) {
      body[&quot;tag.&quot; + eventTags[i].tag] = eventTags[i].value;
    }
  }

  //Add current timestamp
  body[&quot;@timestamp&quot;] = Date.now();

  //Add event.durationsec in seconds
  body[&quot;event.durationsec&quot;] = convertDurationToSeconds(params.event_duration);

  //Add event.sourcetext
  body[&quot;event.sourcetext&quot;] = EventSourceText(params.event_source);

  //Check for an IP and set to 0.0.0.0 if host has no valid IP because Elastic requires IP
  if (body &amp;&amp; (!body[&quot;host_ip&quot;] || !/^([0-9]{1,3}\.){3}[0-9]{1,3}$/.test(body[&quot;host_ip&quot;]))) {
    body[&quot;host_ip&quot;] = &quot;0.0.0.0&quot;;
  }

  //Create URL of the trigger
  body[&quot;zabbix_url&quot;] = (params.zabbix_url + '/tr_events.php?triggerid=' + params.trigger_id + '&amp;eventid=' + params.event_id);

  // Send the request to Elasticsearch
  var req = new HttpRequest();
  req.addHeader('Content-Type: application/json');

  //Add ApiKey to request, if API key not needed, simply don't add it.
    req.addHeader('Authorization: ApiKey ' + params.elastic_apikey);

  //Get the response from Elastic
  var resp = req.post(params.elastic_url + params.elastic_index + '/_doc', JSON.stringify(body)),
  data = JSON.parse(resp);

  //Enable line below for debugging
  //Zabbix.Log(4, '[ Elastic Webhook ] Response: ' + resp);

  //Check if the response is between 200 and 300 and has data._id as result
  if (req.getStatus() &gt;= 200 &amp;&amp; req.getStatus() &lt; 300 &amp;&amp; data._id) {
    return data._id;
  } 
  else {
    var message = ((typeof data.message === 'string') ? data.message : 'Error');
    Zabbix.Log(3, '[ Elastic Webhook ] FAILED with responsecode: ' + req.getStatus());
    throw message + '. For more details check Zabbix server log.';
  }

}



catch (error) {
  Zabbix.log(3, '[ Elastic Webhook ] ERROR: ' + error);
  throw 'Sending failed: ' + error;
}</script>
            <timeout>4s</timeout>
            <description>v1.0 By Zablove

Mediatype to send trigger actions to Elasticsearch.

If your Elasticsearch cluster needs authentication, create an API key first and add it to the parameters.
Change at least these parameters according to your environment:
elastic_url (URL of your Elastic instance)
zabbix_url (URL of your Zabbix instance so you have a direct URL to your trigger in Elasticsearch)

Note: This version is tested on Zabbix 6.4</description>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}
Problem name: {EVENT.NAME}
Host: {HOST.NAME}
Severity: {EVENT.SEVERITY}
Operational data: {EVENT.OPDATA}
Original problem ID: {EVENT.ID}
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
Problem name: {EVENT.NAME}
Problem duration: {EVENT.DURATION}
Host: {HOST.NAME}
Severity: {EVENT.SEVERITY}
Original problem ID: {EVENT.ID}
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem in {EVENT.AGE}: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
{EVENT.UPDATE.MESSAGE}

Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}

Device IP: {DISCOVERY.DEVICE.IPADDRESS}
Device DNS: {DISCOVERY.DEVICE.DNS}
Device status: {DISCOVERY.DEVICE.STATUS}
Device uptime: {DISCOVERY.DEVICE.UPTIME}

Device service name: {DISCOVERY.SERVICE.NAME}
Device service port: {DISCOVERY.SERVICE.PORT}
Device service status: {DISCOVERY.SERVICE.STATUS}
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}
Host IP: {HOST.IP}
Agent port: {HOST.PORT}</message>
                </message_template>
                <message_template>
                    <event_source>INTERNAL</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Internal problem</subject>
                </message_template>
                <message_template>
                    <event_source>SERVICE</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Service &quot;{SERVICE.NAME}&quot; problem: {EVENT.NAME}</subject>
                    <message>Service problem started at {EVENT.TIME} on {EVENT.DATE}
Service problem name: {EVENT.NAME}
Service: {SERVICE.NAME}
Severity: {EVENT.SEVERITY}
Original problem ID: {EVENT.ID}
Service description: {SERVICE.DESCRIPTION}

{SERVICE.ROOTCAUSE}</message>
                </message_template>
                <message_template>
                    <event_source>SERVICE</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Service &quot;{SERVICE.NAME}&quot; resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>Service &quot;{SERVICE.NAME}&quot; has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
Problem name: {EVENT.NAME}
Problem duration: {EVENT.DURATION}
Severity: {EVENT.SEVERITY}
Original problem ID: {EVENT.ID}
Service description: {SERVICE.DESCRIPTION}</message>
                </message_template>
                <message_template>
                    <event_source>SERVICE</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Changed &quot;{SERVICE.NAME}&quot; service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}</subject>
                    <message>Changed &quot;{SERVICE.NAME}&quot; service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
Current problem age is {EVENT.AGE}.
Service description: {SERVICE.DESCRIPTION}

{SERVICE.ROOTCAUSE}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
